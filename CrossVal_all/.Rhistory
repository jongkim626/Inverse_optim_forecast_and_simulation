# Extract solution
Obj<-ProcessRGDX_SingleValue('Output', 'Obj')
if(length(Obj) == 0){ Obj_decoup_t[t] = 0
}else{ Obj_decoup_t[t] = Obj}
util_decoup_t[t,]<-  as.numeric(ProcessRGDX('Output', 'util',list(uelsGDX('b',B)),c("b"),"b")[-1])
DA_load_t[t,]<- as.numeric(ProcessRGDX('Output', 'DA_load',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
profit_w[t,]<- as.numeric(ProcessRGDX('Output', 'profit_w',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
message(L)
stop=TRUE
}
}
#----- Single block ----#
# Compute expected load
e_load[t] = 1.5*mean(load_mat[t,])
E.in <- inputGDX('E',e_load[t])
L_s[t]=0
stop=FALSE
while(!stop){
# Risk parameter
L.in <- inputGDX('L',L_s[t])
# Create GDX Input file
wgdx('Input', set.w,E.in,DA_price.in,RT_price.in,PI_price.in,load_sc.in,L.in,beta.in , squeeze = 'n')
# Run the gams script
ptm <- proc.time()
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=2',sep=""))
time_solve = proc.time() - ptm
# Unpack the outputs
solver_status<-ProcessRGDX_SingleValue('Output', 'solver_status')
if(solver_status != 1){
#message(paste('Not feasible. Increase L=',L_s[t],sep=''))
L_s[t]=L_s[t]+0.01
}else{
message(paste('Solve time:',round(time_solve[3],2)))
message(paste('L=',L_s[t],sep=''))
# Extract solution
Obj<-ProcessRGDX_SingleValue('Output', 'Obj')
if(length(Obj) == 0){ Obj_decoup_t_s[t] = 0
}else{ Obj_decoup_t_s[t] = Obj}
util_decoup_t_s[t]<-  ProcessRGDX_SingleValue('Output', 'util')
DA_load_t_s[t,]<- as.numeric(ProcessRGDX('Output', 'DA_load',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
profit_w_s[t,]<- as.numeric(ProcessRGDX('Output', 'profit_w',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
message(L_s)
stop=TRUE
}
}
util_decoup_t_s
L_s
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=2',sep=""))
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=3',sep=""))
solver_status<-ProcessRGDX_SingleValue('Output', 'solver_status')
solver_status
L_s[t]=0.8
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=3',sep=""))
L.in <- inputGDX('L',L_s[t])
wgdx('Input', set.w,E.in,DA_price.in,RT_price.in,PI_price.in,load_sc.in,L.in,beta.in , squeeze = 'n')
# Run the gams script
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=3',sep=""))
e_load
load_mat[t,]
load_sc.in
load_mat
load_mat
e_load
e_load[t] = mean(load_mat[t,])
E.in <- inputGDX('E',e_load[t])
L_s[t]=0
stop=FALSE
while(!stop){
# Risk parameter
L.in <- inputGDX('L',L_s[t])
# Create GDX Input file
wgdx('Input', set.w,E.in,DA_price.in,RT_price.in,PI_price.in,load_sc.in,L.in,beta.in , squeeze = 'n')
# Run the gams script
ptm <- proc.time()
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=3',sep=""))
time_solve = proc.time() - ptm
# Unpack the outputs
solver_status<-ProcessRGDX_SingleValue('Output', 'solver_status')
if(solver_status != 1){
#message(paste('Not feasible. Increase L=',L_s[t],sep=''))
L_s[t]=L_s[t]+0.01
}else{
message(paste('Solve time:',round(time_solve[3],2)))
message(paste('L=',L_s[t],sep=''))
# Extract solution
Obj<-ProcessRGDX_SingleValue('Output', 'Obj')
if(length(Obj) == 0){ Obj_decoup_t_s[t] = 0
}else{ Obj_decoup_t_s[t] = Obj}
util_decoup_t_s[t]<-  ProcessRGDX_SingleValue('Output', 'util')
DA_load_t_s[t,]<- as.numeric(ProcessRGDX('Output', 'DA_load',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
profit_w_s[t,]<- as.numeric(ProcessRGDX('Output', 'profit_w',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
message(L_s)
stop=TRUE
}
}
e_load[t] = mean(load_mat[t,])
E.in <- inputGDX('E',e_load[t])
L_s[t]=0
stop=FALSE
while(!stop){
# Risk parameter
L.in <- inputGDX('L',L_s[t])
# Create GDX Input file
wgdx('Input', set.w,E.in,DA_price.in,RT_price.in,PI_price.in,load_sc.in,L.in,beta.in , squeeze = 'n')
# Run the gams script
ptm <- proc.time()
system(paste(gams_file, ' ', wpath,'R/GAMS_models/Optimal_bid_decouple_t_chance_1block.gms lo=2',sep=""))
time_solve = proc.time() - ptm
# Unpack the outputs
solver_status<-ProcessRGDX_SingleValue('Output', 'solver_status')
if(solver_status != 1){
#message(paste('Not feasible. Increase L=',L_s[t],sep=''))
L_s[t]=L_s[t]+0.01
}else{
message(paste('Solve time:',round(time_solve[3],2)))
message(paste('L=',L_s[t],sep=''))
# Extract solution
Obj<-ProcessRGDX_SingleValue('Output', 'Obj')
if(length(Obj) == 0){ Obj_decoup_t_s[t] = 0
}else{ Obj_decoup_t_s[t] = Obj}
util_decoup_t_s[t]<-  ProcessRGDX_SingleValue('Output', 'util')
DA_load_t_s[t,]<- as.numeric(ProcessRGDX('Output', 'DA_load',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
profit_w_s[t,]<- as.numeric(ProcessRGDX('Output', 'profit_w',list(uelsGDX('w',N_W)),c("w"),"w")[,-1])
message(L_s)
stop=TRUE
}
}
message(paste('L=',L_s[t],sep=''))
paste('L=',L_s[t],sep='')
wpath = '/zhome/60/4/49213/Dropbox/InverseOpt/InvOpt_Forecast/Simulated/CrossVal_all/'
setwd(wpath)
folder_result = 'Data_out/'# B=12 Dtrain=28*3/'
files_aux = dir(folder_result)
files = files_aux[grep('result_',files_aux)] # select the workspaces
# Order the files - obtain the last numbers
aux = unlist(strsplit(files,'.RData'))
nums= as.numeric(substr(aux,8,10))
ii = sort(nums,index.return=T)
files = files[ii$ix] # Ordered files
index_loop = as.numeric(substr(files,8,10)) # 8-10
#length(files)
upd_per = 1:4 # how oftern the parameters are re-estimated. equal to Update_horizon
result_all = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_all$K =  result$K
result_all$EXP =  result$EXP
result_all$mae = c(t(result$mae[,upd_per]))
result_all$rmse = c(t(result$rmse[,upd_per]))
result_all$mape = c(t(result$mape[,upd_per]))
result_all$smape = c(t(result$smape[,upd_per]))
result_all$C.pred= c(t(result[[7]][,upd_per]))
result_all$C.actual= c(t(result[[8]][,upd_per]))
}else{
result_all$K = c(result_all$K, result$K)
result_all$EXP = c(result_all$EXP, result$EXP)
result_all$mae = cbind(result_all$mae,c(t(result$mae[,upd_per])))
result_all$rmse = cbind(result_all$rmse,c(t(result$rmse[,upd_per])))
result_all$mape = cbind(result_all$mape,c(t(result$mape[,upd_per])))
result_all$smape = cbind(result_all$smape,c(t(result$smape[,upd_per])))
result_all$C.pred= cbind(result_all$C.pred,c(t(result[[8]][,upd_per])))
result_all$C.actual= cbind(result_all$C.actual,c(t(result[[9]][,upd_per])))
}
}
str(result_all)
myfun = function(x) return(apply(x,2,mean,na.rm=T))
str(result_all)
ll = result_all[c(3:6)]
str(ll)
mean_stat = lapply(ll,myfun) # Calculate the mean of the statistic along the days (ie, one per L)
# Collect dataset
df = data.frame(K = result_all$K,
EXP = result_all$EXP,
smape = mean_stat$smape,
rmse = mean_stat$rmse,
mae = mean_stat$mae,
mape = mean_stat$mape)
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(df$K, df$mape)
plot(df$K, df$smape)
plot(df$K, df$smape,type="l")
grid()
plot(df$K, df$rmse,type="l")
grid()
## Move the log files to a separate folder
files = dir()
i_f = which(substr(files,1,6) == 'Adj_CV')
dir.create('Data_out/output_results')
file.copy(files[i_f], 'Data_out/output_results')
file.remove(files[i_f])
# Remove useless folders
files = dir()
i_f = which(substr(files,1,12) == 'working_dir_')
unlink(files[i_f])
####################
###  Load datasets
####################
folder_result = 'Data_out/'# B=12 Dtrain=28*3/'
files_aux = dir(folder_result)
files = files_aux[grep('result_',files_aux)] # select the workspaces
# Order the files - obtain the last numbers
aux = unlist(strsplit(files,'.RData'))
nums= as.numeric(substr(aux,8,10))
ii = sort(nums,index.return=T)
files = files[ii$ix] # Ordered files
index_loop = as.numeric(substr(files,8,10)) # 8-10
#length(files)
upd_per = 1:4 # how oftern the parameters are re-estimated. equal to Update_horizon
result_all = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_all$K =  result$K
result_all$EXP =  result$EXP
result_all$mae = c(t(result$mae[,upd_per]))
result_all$rmse = c(t(result$rmse[,upd_per]))
result_all$mape = c(t(result$mape[,upd_per]))
result_all$smape = c(t(result$smape[,upd_per]))
result_all$C.pred= c(t(result[[7]][,upd_per]))
result_all$C.actual= c(t(result[[8]][,upd_per]))
}else{
result_all$K = c(result_all$K, result$K)
result_all$EXP = c(result_all$EXP, result$EXP)
result_all$mae = cbind(result_all$mae,c(t(result$mae[,upd_per])))
result_all$rmse = cbind(result_all$rmse,c(t(result$rmse[,upd_per])))
result_all$mape = cbind(result_all$mape,c(t(result$mape[,upd_per])))
result_all$smape = cbind(result_all$smape,c(t(result$smape[,upd_per])))
result_all$C.pred= cbind(result_all$C.pred,c(t(result[[8]][,upd_per])))
result_all$C.actual= cbind(result_all$C.actual,c(t(result[[9]][,upd_per])))
}
}
str(result_all)
# Collect summary statistic
myfun = function(x) return(apply(x,2,mean,na.rm=T))
str(result_all)
ll = result_all[c(3:6)]
str(ll)
mean_stat = lapply(ll,myfun) # Calculate the mean of the statistic along the days (ie, one per L)
# Collect dataset
df = data.frame(K = result_all$K,
EXP = result_all$EXP,
smape = mean_stat$smape,
rmse = mean_stat$rmse,
mae = mean_stat$mae,
mape = mean_stat$mape)
###### HOMEMADE PLOT
Un_E = unique(df$E)
n_E = length(Un_E)
Un_K = unique(df$K)
n_K = length(Un_K)
# pdf(width=10, height=3.3, file = "/zhome/60/4/49213/InvOpt_Adj/Figures/Interaction-plot-Sep-lwd2.pdf")
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(df$K, df$rmse,type="l")
grid()
## Move the log files to a separate folder
files = dir()
i_f = which(substr(files,1,6) == 'Adj_CV')
dir.create('Data_out/output_results')
file.copy(files[i_f], 'Data_out/output_results')
file.remove(files[i_f])
# Remove useless folders
files = dir()
i_f = which(substr(files,1,12) == 'working_dir_')
unlink(files[i_f])
####################
###  Load datasets
####################
folder_result = 'Data_out/'# B=12 Dtrain=28*3/'
files_aux = dir(folder_result)
files = files_aux[grep('result_',files_aux)] # select the workspaces
# Order the files - obtain the last numbers
aux = unlist(strsplit(files,'.RData'))
nums= as.numeric(substr(aux,8,10))
ii = sort(nums,index.return=T)
files = files[ii$ix] # Ordered files
index_loop = as.numeric(substr(files,8,10)) # 8-10
#length(files)
upd_per = 1:4 # how oftern the parameters are re-estimated. equal to Update_horizon
result_all = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_all$K =  result$K
result_all$EXP =  result$EXP
result_all$mae = c(t(result$mae[,upd_per]))
result_all$rmse = c(t(result$rmse[,upd_per]))
result_all$mape = c(t(result$mape[,upd_per]))
result_all$smape = c(t(result$smape[,upd_per]))
result_all$C.pred= c(t(result[[7]][,upd_per]))
result_all$C.actual= c(t(result[[8]][,upd_per]))
}else{
result_all$K = c(result_all$K, result$K)
result_all$EXP = c(result_all$EXP, result$EXP)
result_all$mae = cbind(result_all$mae,c(t(result$mae[,upd_per])))
result_all$rmse = cbind(result_all$rmse,c(t(result$rmse[,upd_per])))
result_all$mape = cbind(result_all$mape,c(t(result$mape[,upd_per])))
result_all$smape = cbind(result_all$smape,c(t(result$smape[,upd_per])))
result_all$C.pred= cbind(result_all$C.pred,c(t(result[[8]][,upd_per])))
result_all$C.actual= cbind(result_all$C.actual,c(t(result[[9]][,upd_per])))
}
}
str(result_all)
# Collect summary statistic
myfun = function(x) return(apply(x,2,mean,na.rm=T))
str(result_all)
ll = result_all[c(3:6)]
str(ll)
mean_stat = lapply(ll,myfun) # Calculate the mean of the statistic along the days (ie, one per L)
# Collect dataset
df = data.frame(K = result_all$K,
EXP = result_all$EXP,
smape = mean_stat$smape,
rmse = mean_stat$rmse,
mae = mean_stat$mae,
mape = mean_stat$mape)
###### PLOT
# pdf(width=10, height=3.3, file = "/zhome/60/4/49213/InvOpt_Adj/Figures/Interaction-plot-Sep-lwd2.pdf")
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(df$K, df$rmse,type="l")
grid()
upd_plot = 2*7 # How often to update the predictions
i_sel = which(min(df$smape,na.rm=T) == df$smape) # Select column or combination of input param
df[i_sel,]
n = length(result_all$C.actual[])
par(mfrow=c(1,1))
plot(result_all$C.actual[1:48,i_sel],type="l",ylim=c(-2,25))
plot(result_all$C.actual[1:48,i_sel],type="l")
lines(result_all$C.pred[1:48,i_sel],col=2)
abline(v= upd_plot*(1:200),col=8,lty=2)
upd_plot = 12 # How often to update the predictions
i_sel = which(min(df$smape,na.rm=T) == df$smape) # Select column or combination of input param
df[i_sel,]
n = length(result_all$C.actual[])
par(mfrow=c(1,1))
plot(result_all$C.actual[1:48,i_sel],type="l")
lines(result_all$C.pred[1:48,i_sel],col=2)
abline(v= upd_plot*(1:200),col=8,lty=2)
result_all
n = length(result_all$C.actual[])
par(mfrow=c(1,1))
plot(result_all$C.actual[1:24,i_sel],type="l")
lines(result_all$C.pred[1:24,i_sel],col=2)
abline(v= upd_plot*(1:200),col=8,lty=2)
wpath = '/zhome/60/4/49213/Dropbox/InverseOpt/InvOpt_Forecast/Simulated/CrossVal_all/'
## Load data ald read result files
setwd(wpath)
folder_result = 'Data_out_noflex/'# B=12 Dtrain=28*3/'
files_aux = dir(folder_result)
files = files_aux[grep('result_',files_aux)] # select the workspaces
# Order the files - obtain the last numbers
aux = unlist(strsplit(files,'.RData'))
nums= as.numeric(substr(aux,8,10))
ii = sort(nums,index.return=T)
files = files[ii$ix] # Ordered files
index_loop = as.numeric(substr(files,8,10)) # 8-10
#length(files)
upd_per = 1:12 # how oftern the parameters are re-estimated. equal to Update_horizon
result_all = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_all$K =  result$K
result_all$EXP =  result$EXP
result_all$mae = c(t(result$mae[,upd_per]))
result_all$rmse = c(t(result$rmse[,upd_per]))
result_all$mape = c(t(result$mape[,upd_per]))
result_all$smape = c(t(result$smape[,upd_per]))
result_all$C.pred= c(t(result[[7]][,upd_per]))
result_all$C.actual= c(t(result[[8]][,upd_per]))
}else{
result_all$K = c(result_all$K, result$K)
result_all$EXP = c(result_all$EXP, result$EXP)
result_all$mae = cbind(result_all$mae,c(t(result$mae[,upd_per])))
result_all$rmse = cbind(result_all$rmse,c(t(result$rmse[,upd_per])))
result_all$mape = cbind(result_all$mape,c(t(result$mape[,upd_per])))
result_all$smape = cbind(result_all$smape,c(t(result$smape[,upd_per])))
result_all$C.pred= cbind(result_all$C.pred,c(t(result[[8]][,upd_per])))
result_all$C.actual= cbind(result_all$C.actual,c(t(result[[9]][,upd_per])))
}
}
str(result_all)
# Collect summary statistic
myfun = function(x) return(apply(x,2,mean,na.rm=T))
str(result_all)
ll = result_all[c(3:6)]
str(ll)
mean_stat = lapply(ll,myfun) # Calculate the mean of the statistic along the days (ie, one per L)
# Collect dataset
df = data.frame(K = result_all$K,
EXP = result_all$EXP,
smape = mean_stat$smape,
rmse = mean_stat$rmse,
mae = mean_stat$mae,
mape = mean_stat$mape)
###### PLOT
# pdf(width=10, height=3.3, file = "/zhome/60/4/49213/InvOpt_Adj/Figures/Interaction-plot-Sep-lwd2.pdf")
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(df$K, df$rmse,type="l")
grid()
upd_plot = 12 # How often to update the predictions
i_sel = which(min(df$smape,na.rm=T) == df$smape) # Select column or combination of input param
df[i_sel,]
n = length(result_all$C.actual[])
par(mfrow=c(1,1))
plot(result_all$C.actual[1:24,i_sel],type="l")
lines(result_all$C.pred[1:24,i_sel],col=2)
abline(v= upd_plot*(1:200),col=8,lty=2)
str(result_all)
n = length(result_all$C.actual[])
par(mfrow=c(1,1))
plot(result_all$C.actual[,i_sel],type="l")
lines(result_all$C.pred[,i_sel],col=2)
abline(v= upd_plot*(1:200),col=8,lty=2)
# Persisance? |A-F|/A
n = length(result_all$C.actual[,i_sel])
mean(abs( (result_all$C.actual[-1,i_sel] - result_all$C.actual[-n,i_sel]) / result_all$C.actual[-1,i_sel])) # Persistance
mean(abs( (result_all$C.actual[,i_sel] - result_all$C.pred[,i_sel]) / result_all$C.actual[,i_sel])) # Our model
plot(df$K, df$rmse,type="l", xlab="K",ylab="RMSE")
grid()
index_loop
folder_result = 'Data_out_noflex/'# B=12 Dtrain=28*3/'
index_loop = 1:24
upd_per = 1:12
result_no = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_no$K =  result$K
result_no$rmse = c(t(result$rmse[,upd_per]))
}else{
result_no$K = c(result_no$K, result$K)
result_no$rmse = cbind(result_no$rmse,c(t(result$rmse[,upd_per])))
}
}
str(result_no)
folder_result = 'Data_out_2flex/'# B=12 Dtrain=28*3/'
index_loop = 1:24
upd_per = 1:12
result_fl = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_fl$K =  result$K
result_fl$rmse = c(t(result$rmse[,upd_per]))
}else{
result_fl$K = c(result_fl$K, result$K)
result_fl$rmse = cbind(result_fl$rmse,c(t(result$rmse[,upd_per])))
}
}
str(result_fl)
result_fl
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(result_fl$K, result_fl$rmse,type="l", xlab="K",ylab="RMSE")
result_fl$rmse
mean_stat = lapply(result_fl,myfun) # Calculate the mean of the statistic along the days (ie, one per L)
mean_stat
folder_result = 'Data_out_2flex/'# B=12 Dtrain=28*3/'
index_loop = 1:24
upd_per = 1:12
result_fl = list()
for(f in 1:length(index_loop)){
load(paste(folder_result,'result_',index_loop[f],sep=""))
if(f==1){
result_fl$K =  result$K
result_fl$rmse = c(t(result$rmse[,upd_per]))
}else{
result_fl$K = c(result_fl$K, result$K)
result_fl$rmse = cbind(result_fl$rmse,c(t(result$rmse[,upd_per])))
}
}
str(result_fl)
mean_stat = lapply(result_fl,myfun) # Calculate the mean of the statistic along the days (ie, one per L)
mean_stat
result_fl
str(result_fl)
apply(result_fl$rmse,2,mean)
mean_no = apply(result_no$rmse,2,mean)
K = result_fl$K
mean_fl = apply(result_fl$rmse,2,mean)
mean_no = apply(result_no$rmse,2,mean)
plot(K, mean_fl,type="l", xlab="K",ylab="RMSE")
lines(L,mean_no)
lines(K,mean_no)
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(K, mean_no,type="l", xlab="K",ylab="RMSE")
lines(K,mean_fl,col=4)
plot(K, mean_no,type="l", xlab="K",ylab="RMSE",ylim=c(range(mean_no,mean_fl)))
lines(K,mean_fl,col=4)
grid()
legend('bottomleft',c("No flex","Flex"),col=c(1,2))
legend('bottomleft',c("No flex","Flex"),col=c(1,2),lty=1)
legend('bottomleft',c("No flex","Flex"),col=c(1,4),lty=1)
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(K, mean_no,type="l", xlab="K",ylab="RMSE",ylim=c(range(mean_no,mean_fl)))
lines(K,mean_fl,col=4)
grid()
legend('bottomleft',c("No flex","Flex"),col=c(1,4),lty=1)
pdf(width=10, height=3.3, file = "/zhome/60/4/49213/Dropbox/InverseOpt/InvOpt_Forecast/Simulated/Latex/Figures/CV.pdf",pointsize=7)
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(K, mean_no,type="l", xlab="K",ylab="RMSE",ylim=c(range(mean_no,mean_fl)))
lines(K,mean_fl,col=4)
grid()
legend('bottomleft',c("No flex","Flex"),col=c(1,4),lty=1)
dev.off()
pdf(width=3.5, height=1.7, file = "/zhome/60/4/49213/Dropbox/InverseOpt/InvOpt_Forecast/Simulated/Latex/Figures/CV.pdf",pointsize=7)
par(mar = c(4,4.1,1.1,2.1),mfrow=c(1,1))
plot(K, mean_no,type="l", xlab="K",ylab="RMSE",ylim=c(range(mean_no,mean_fl)))
lines(K,mean_fl,col=4)
grid()
legend('bottomleft',c("No flex","Flex"),col=c(1,4),lty=1)
dev.off()
